{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Convolutions","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"x-DqiZGeVloH","colab_type":"code","colab":{}},"source":["from keras.layers import Conv2D"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_xSHK6DfV82L","colab_type":"text"},"source":["###Format: \n","Conv2D(filters, kernel_size, strides, padding, activation='relu', input_shape)"]},{"cell_type":"markdown","metadata":{"id":"Wr7VsBvNWZg0","colab_type":"text"},"source":["###Arguments\n","\n","1. filters - number of filters\n","\n","2. kernel_size = number specifying both height and width of the window\n","\n","3. stride - a step of the window? if not specified == 1\n","\n","4. padding - 'valid' or 'same - if not specified == 'valid, no additional ncells outside the image\n","\n","5. activation - 'relu' typically., if not specified no function is used? pit is strongly advised to use relu\n","\n","when using convolutional layer as ur first layer u must specify input_shape, specifies heght width and depth, and is a tuple"]},{"cell_type":"code","metadata":{"id":"fwGcsUGtWDpq","colab_type":"code","outputId":"5937628e-a0bf-4b7c-f22d-13a883ea8810","executionInfo":{"status":"ok","timestamp":1562149864766,"user_tz":-180,"elapsed":625,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":328}},"source":["from keras.models import Sequential\n","from keras.layers import Conv2D\n","\n","model = Sequential()\n","model.add(Conv2D(filters=16, kernel_size=2, strides=2, padding='valid', \n","    activation='relu', input_shape=(200, 200, 1)))\n","model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0703 10:31:05.781256 140650295662464 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:74: The name tf.get_default_graph is deprecated. Please use tf.compat.v1.get_default_graph instead.\n","\n","W0703 10:31:05.840501 140650295662464 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:517: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","W0703 10:31:05.851061 140650295662464 deprecation_wrapper.py:119] From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4138: The name tf.random_uniform is deprecated. Please use tf.random.uniform instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_1 (Conv2D)            (None, 100, 100, 16)      80        \n","=================================================================\n","Total params: 80\n","Trainable params: 80\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CTNAWArWaEDl","colab_type":"text"},"source":["###Formula for number of weights in a convolutional layer\n","\n","1. K - number of filters in the layer\n","2. F - the height and width of the layer\n","3. D_in - the depth of the previous layer\n","\n","so, the total number of parameters for the layer equals: \n","  $$K*(F*F)*D_in+K$$"]},{"cell_type":"markdown","metadata":{"id":"0V43iNvFa38X","colab_type":"text"},"source":["###Formula for the shape of the convolutional layer\n","\n","1. K - number of filters\n","2. F - h/w of the window\n","3. S - stride\n","4. H_in - height of the previous layer\n","5. W_in - width of the previous layer\n","\n","Assuming,  that padding = 'same'\n","\n","$$ height = ceil(float(H_in)/float(s))$$\n","$$ width = ceil(float(W_in)/ float(s))$$\n","\n","ceil - rounding\n","\n","Assuming, that padding = ' valid'\n","\n","$$ height = ceil(float(H_in-F+1)/float(s)) $$\n","\n","$$ width = ceil(float(W_in-F+1)/float(s)) $$"]},{"cell_type":"code","metadata":{"id":"_HKJZaq9Y0Ky","colab_type":"code","outputId":"84262725-984a-4f76-8494-17b1d3099ce4","executionInfo":{"status":"ok","timestamp":1562150859116,"user_tz":-180,"elapsed":593,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":181}},"source":["from keras.models import Sequential\n","from keras.layers import Conv2D\n","\n","model = Sequential()\n","model.add(Conv2D(filters=32, kernel_size=3, strides=2, padding='same', \n","    activation='relu', input_shape=(128, 128, 3)))\n","model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_2 (Conv2D)            (None, 64, 64, 32)        896       \n","=================================================================\n","Total params: 896\n","Trainable params: 896\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"S_Z6d-DyegU4","colab_type":"text"},"source":["###Pooling layers\n","\n","1. MaxPooling\n","\n","2. AveragePooling"]},{"cell_type":"markdown","metadata":{"id":"qQx6a-CMeveR","colab_type":"text"},"source":["###Format:\n","\n","**MaxPooling2D**(pool_size, strides, padding)\n","\n","###Arguments:\n","1. **pool_size** - Number for width and height of the pooling window\n","\n","2. **strides** - vert and horiz stride, if not specified equals to 'pool_size'\n","\n","3. **padding** - 'valid' or 'same'"]},{"cell_type":"code","metadata":{"id":"xGeaf0Rncm78","colab_type":"code","outputId":"8bc6f102-210e-45f6-ed7d-43e06961af87","executionInfo":{"status":"ok","timestamp":1562151715538,"user_tz":-180,"elapsed":614,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":181}},"source":["from keras.models import Sequential\n","from keras.layers import MaxPooling2D\n","\n","model = Sequential()\n","model.add(MaxPooling2D(pool_size=4, strides=4, padding= 'same', input_shape=(100, 100, 15)))\n","model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","max_pooling2d_5 (MaxPooling2 (None, 25, 25, 15)        0         \n","=================================================================\n","Total params: 0\n","Trainable params: 0\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mQk9MhCHiEkV","colab_type":"text"},"source":["##In convolutional nn we want to \n","#decrease the height and width of the input data and following layers\n","###is performed by pooling layers\n","###and to \n","#Increase the depth of the layers as they are illustrating different fitures, that are detected in the image"]},{"cell_type":"code","metadata":{"id":"GXWbNQL4ftnj","colab_type":"code","colab":{}},"source":["|"],"execution_count":0,"outputs":[]}]}