{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"relu_and_deep_nn","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"6fhMk6ehsrEP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":72},"outputId":"8dfff6d7-fc43-471d-9c8c-fceb151a2ff4","executionInfo":{"status":"ok","timestamp":1562088979244,"user_tz":-180,"elapsed":1017,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["import tensorflow as tf\n","\n","output = None\n","hidden_layer_weights = [\n","    [0.1, 0.2, 0.4],\n","    [0.4, 0.6, 0.6],\n","    [0.5, 0.9, 0.1],\n","    [0.8, 0.2, 0.8]]\n","out_weights = [\n","    [0.1, 0.6],\n","    [0.2, 0.1],\n","    [0.7, 0.9]]\n","\n","# Weights and biases\n","weights = [\n","    tf.Variable(hidden_layer_weights),\n","    tf.Variable(out_weights)]\n","biases = [\n","    tf.Variable(tf.zeros(3)),\n","    tf.Variable(tf.zeros(2))]\n","\n","# Input\n","features = tf.Variable([[1.0, 2.0, 3.0, 4.0], [-1.0, -2.0, -3.0, -4.0], [11.0, 12.0, 13.0, 14.0]])\n","\n","# TODO: Create Model\n","hidden_input = tf.add(tf.matmul(features,weights[0]),biases[0])\n","hidden_output = tf.nn.relu(hidden_input)\n","\n","output = tf.add(tf.matmul(hidden_output,weights[1]),biases[1])\n","prediction = tf.nn.softmax(output)\n","\n","with tf.Session() as session:\n","  session.run(tf.global_variables_initializer())\n","  print(session.run(output))\n","# TODO: Print session results"],"execution_count":5,"outputs":[{"output_type":"stream","text":["[[ 5.1099997  8.44     ]\n"," [ 0.         0.       ]\n"," [24.01      38.24     ]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"i9oBWFT1t4ow","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":72},"outputId":"60695100-0923-4c64-cec3-6d717f0497c5","executionInfo":{"status":"ok","timestamp":1562088941141,"user_tz":-180,"elapsed":2441,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["import tensorflow as tf\n","\n","output = None\n","hidden_layer_weights = [\n","    [0.1, 0.2, 0.4],\n","    [0.4, 0.6, 0.6],\n","    [0.5, 0.9, 0.1],\n","    [0.8, 0.2, 0.8]]\n","out_weights = [\n","    [0.1, 0.6],\n","    [0.2, 0.1],\n","    [0.7, 0.9]]\n","\n","# Weights and biases\n","weights = [\n","    tf.Variable(hidden_layer_weights),\n","    tf.Variable(out_weights)]\n","biases = [\n","    tf.Variable(tf.zeros(3)),\n","    tf.Variable(tf.zeros(2))]\n","\n","# Input\n","features = tf.Variable([[1.0, 2.0, 3.0, 4.0], [-1.0, -2.0, -3.0, -4.0], [11.0, 12.0, 13.0, 14.0]])\n","\n","# TODO: Create Model\n","hidden_layer = tf.add(tf.matmul(features, weights[0]), biases[0])\n","hidden_layer = tf.nn.relu(hidden_layer)\n","logits = tf.add(tf.matmul(hidden_layer, weights[1]), biases[1])\n","\n","# TODO: Print session results\n","with tf.Session() as sess:\n","    sess.run(tf.global_variables_initializer())\n","    print(sess.run(logits))"],"execution_count":4,"outputs":[{"output_type":"stream","text":["[[ 5.1099997  8.44     ]\n"," [ 0.         0.       ]\n"," [24.01      38.24     ]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uuJX24qEt53y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":583},"outputId":"d8f6b9f8-0e77-424a-e001-17800a00ac81","executionInfo":{"status":"ok","timestamp":1562090804032,"user_tz":-180,"elapsed":6687,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["from tensorflow.examples.tutorials.mnist import input_data\n","mnist = input_data.read_data_sets(\".\", one_hot = True, reshape = False)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0702 18:06:41.100740 140402001094528 deprecation.py:323] From <ipython-input-1-12a488ac486e>:2: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n","W0702 18:06:41.102571 140402001094528 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please write your own downloading logic.\n","W0702 18:06:41.103741 140402001094528 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/base.py:252: _internal_retry.<locals>.wrap.<locals>.wrapped_fn (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use urllib or similar directly.\n","W0702 18:06:41.640496 140402001094528 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n"],"name":"stderr"},{"output_type":"stream","text":["Successfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\n","Extracting ./train-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["W0702 18:06:42.258689 140402001094528 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.data to implement this functionality.\n","W0702 18:06:42.264777 140402001094528 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use tf.one_hot on tensors.\n"],"name":"stderr"},{"output_type":"stream","text":["Successfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\n","Extracting ./train-labels-idx1-ubyte.gz\n","Successfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\n","Extracting ./t10k-images-idx3-ubyte.gz\n"],"name":"stdout"},{"output_type":"stream","text":["W0702 18:06:42.748920 140402001094528 deprecation.py:323] From /usr/local/lib/python3.6/dist-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n"],"name":"stderr"},{"output_type":"stream","text":["Successfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\n","Extracting ./t10k-labels-idx1-ubyte.gz\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Le5V4K20yGOH","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","\n","#Parameters\n","\n","learning_rate = 0.001\n","training_epochs = 20\n","batch_size = 128\n","display_step = 1\n","\n","n_input = 784\n","n_classes = 10"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"2R8cdjGHy6ih","colab_type":"code","colab":{}},"source":["n_hidden_layer = 256"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"541lGH1uzACj","colab_type":"code","colab":{}},"source":["weights = {'hidden_layer': tf.Variable(tf.random_normal([n_input,n_hidden_layer])),\n","                                      'out': tf.Variable(tf.random_normal([n_hidden_layer,n_classes]))}"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"C1f5rx8fz5Fe","colab_type":"code","colab":{}},"source":["biases = {'hidden_layer' : tf.Variable(tf.random_normal([n_hidden_layer])), \n","         'out': tf.Variable(tf.random_normal([n_classes]))}"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dCukoUSjzt-L","colab_type":"code","colab":{}},"source":["x= tf.placeholder(\"float\", [None, 28, 28, 1])\n","y = tf.placeholder(\"float\", [None, n_classes])\n","\n","#Reshape of 28x28 image into a row of 784\n","x_flat = tf.reshape(x, [-1, n_input])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"r5d3Vnv10hOG","colab_type":"code","colab":{}},"source":["#Forward pass\n","layer_1 = tf.add(tf.matmul(x_flat, weights['hidden_layer']), biases['hidden_layer'])\n","layer_1 = tf.nn.relu(layer_1)\n","logits = tf.add(tf.matmul(layer_1, weights['out']), biases['out'])\n","\n","\n","#Optimizer\n","cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = logits,labels= y))\n","optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(cost)\n","\n","init = tf.global_variables_initializer()\n","\n","with tf.Session() as session:\n","  session.run(init)\n","  for epoch in range(training_epochs):\n","    total_batch = int(mnist.train.num_examples/batch_size)\n","    for i in range(total_batch):\n","      batch_x, batch_y = mnist.train.next_batch(batch_size)\n","      session.run(optimizer, feed_dict={x: batch_x, y: batch_y})"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"i5aKyMxZ3kie","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ulrfmk0l8SAA","colab_type":"text"},"source":["#Saving parameters"]},{"cell_type":"code","metadata":{"id":"oQO-Li-h8Wog","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"61c193f7-17a7-4886-e4b5-f0cd58be2b1f","executionInfo":{"status":"ok","timestamp":1562092116036,"user_tz":-180,"elapsed":1605,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["import tensorflow as tf\n","\n","# The file path to save the data\n","save_file = './model.ckpt'\n","\n","# Two Tensor Variables: weights and bias\n","weights = tf.Variable(tf.truncated_normal([2, 3]))\n","bias = tf.Variable(tf.truncated_normal([3]))\n","\n","# Class used to save and/or restore Tensor Variables\n","saver = tf.train.Saver()\n","\n","with tf.Session() as sess:\n","    # Initialize all the Variables\n","    sess.run(tf.global_variables_initializer())\n","\n","    # Show the values of weights and bias\n","    print('Weights:')\n","    print(sess.run(weights))\n","    print('Bias:')\n","    print(sess.run(bias))\n","\n","    # Save the model\n","    saver.save(sess, save_file)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Weights:\n","[[-0.7028138   0.91178954 -1.6819755 ]\n"," [ 0.48304328 -0.13074905  0.1852565 ]]\n","Bias:\n","[-0.2541217   0.17752862  0.79809016]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"P5pTiPJA8hHR","colab_type":"code","colab":{}},"source":["tf.reset_default_graph()\n","\n","# Two Variables: weights and bias\n","weights = tf.Variable(tf.truncated_normal([2, 3]))\n","bias = tf.Variable(tf.truncated_normal([3]))\n","\n","# Class used to save and/or restore Tensor Variables\n","saver = tf.train.Saver()\n","\n","with tf.Session() as sess:\n","    # Load the weights and bias\n","    saver.restore(sess, save_file)\n","\n","    # Show the values of weights and bias\n","    print('Weight:')\n","    print(sess.run(weights))\n","    print('Bias:')\n","    print(sess.run(bias))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DWAzHRIw8zUU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":90},"outputId":"bdc3c76a-33c1-40e4-fc59-63cf124bfca1","executionInfo":{"status":"ok","timestamp":1562092318291,"user_tz":-180,"elapsed":1908,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["# Remove previous Tensors and Operations\n","tf.reset_default_graph()\n","\n","\n","learning_rate = 0.001\n","n_input = 784  # MNIST data input (img shape: 28*28)\n","n_classes = 10  # MNIST total classes (0-9 digits)\n","\n","# Import MNIST data\n","mnist = input_data.read_data_sets('.', one_hot=True)\n","\n","# Features and Labels\n","features = tf.placeholder(tf.float32, [None, n_input])\n","labels = tf.placeholder(tf.float32, [None, n_classes])\n","\n","# Weights & bias\n","weights = tf.Variable(tf.random_normal([n_input, n_classes]))\n","bias = tf.Variable(tf.random_normal([n_classes]))\n","\n","# Logits - xW + b\n","logits = tf.add(tf.matmul(features, weights), bias)\n","\n","# Define loss and optimizer\n","cost = tf.reduce_mean(\\\n","    tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=labels))\n","optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\\\n","    .minimize(cost)\n","\n","# Calculate accuracy\n","correct_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(labels, 1))\n","accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Extracting ./train-images-idx3-ubyte.gz\n","Extracting ./train-labels-idx1-ubyte.gz\n","Extracting ./t10k-images-idx3-ubyte.gz\n","Extracting ./t10k-labels-idx1-ubyte.gz\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EXOvAT-E9OlU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":217},"outputId":"f60e7d1e-7c72-4d08-a82a-6bde5141fbac","executionInfo":{"status":"ok","timestamp":1562092404882,"user_tz":-180,"elapsed":82344,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["import math\n","\n","save_file = './train_model.ckpt'\n","batch_size = 128\n","n_epochs = 100\n","\n","saver = tf.train.Saver()\n","\n","# Launch the graph\n","with tf.Session() as sess:\n","    sess.run(tf.global_variables_initializer())\n","\n","    # Training cycle\n","    for epoch in range(n_epochs):\n","        total_batch = math.ceil(mnist.train.num_examples / batch_size)\n","\n","        # Loop over all batches\n","        for i in range(total_batch):\n","            batch_features, batch_labels = mnist.train.next_batch(batch_size)\n","            sess.run(\n","                optimizer,\n","                feed_dict={features: batch_features, labels: batch_labels})\n","\n","        # Print status for every 10 epochs\n","        if epoch % 10 == 0:\n","            valid_accuracy = sess.run(\n","                accuracy,\n","                feed_dict={\n","                    features: mnist.validation.images,\n","                    labels: mnist.validation.labels})\n","            print('Epoch {:<3} - Validation Accuracy: {}'.format(\n","                epoch,\n","                valid_accuracy))\n","\n","    # Save the model\n","    saver.save(sess, save_file)\n","    print('Trained Model Saved.')"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Epoch 0   - Validation Accuracy: 0.121799997985363\n","Epoch 10  - Validation Accuracy: 0.24060000479221344\n","Epoch 20  - Validation Accuracy: 0.3752000033855438\n","Epoch 30  - Validation Accuracy: 0.47859999537467957\n","Epoch 40  - Validation Accuracy: 0.5455999970436096\n","Epoch 50  - Validation Accuracy: 0.5935999751091003\n","Epoch 60  - Validation Accuracy: 0.629800021648407\n","Epoch 70  - Validation Accuracy: 0.6571999788284302\n","Epoch 80  - Validation Accuracy: 0.6790000200271606\n","Epoch 90  - Validation Accuracy: 0.6967999935150146\n","Trained Model Saved.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RM7vDgIE9RXb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"f27e131f-5202-4be8-b3e2-1899b4f8cb27","executionInfo":{"status":"ok","timestamp":1562092426434,"user_tz":-180,"elapsed":1273,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["saver = tf.train.Saver()\n","\n","# Launch the graph\n","with tf.Session() as sess:\n","    saver.restore(sess, save_file)\n","\n","    test_accuracy = sess.run(\n","        accuracy,\n","        feed_dict={features: mnist.test.images, labels: mnist.test.labels})\n","\n","print('Test Accuracy: {}'.format(test_accuracy))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Test Accuracy: 0.715399980545044\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QZ-rDmVm9s-W","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","\n","# Remove the previous weights and bias\n","tf.reset_default_graph()\n","\n","save_file = 'model.ckpt'\n","\n","# Two Tensor Variables: weights and bias\n","weights = tf.Variable(tf.truncated_normal([2, 3]))\n","bias = tf.Variable(tf.truncated_normal([3]))\n","\n","saver = tf.train.Saver()\n","\n","# Print the name of Weights and Bias\n","print('Save Weights: {}'.format(weights.name))\n","print('Save Bias: {}'.format(bias.name))\n","\n","with tf.Session() as sess:\n","    sess.run(tf.global_variables_initializer())\n","    saver.save(sess, save_file)\n","\n","# Remove the previous weights and bias\n","tf.reset_default_graph()\n","\n","# Two Variables: weights and bias#поменяли места, у них изменились имена\n","bias = tf.Variable(tf.truncated_normal([3]))\n","weights = tf.Variable(tf.truncated_normal([2, 3]))\n","\n","saver = tf.train.Saver()\n","\n","# Print the name of Weights and Bias\n","print('Load Weights: {}'.format(weights.name))\n","print('Load Bias: {}'.format(bias.name))\n","\n","with tf.Session() as sess:\n","    # Load the weights and bias - ERROR\n","    saver.restore(sess, save_file)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nEnLfovc-eCO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"8ae97d62-b092-4a4d-f237-1bd113a2d3f7","executionInfo":{"status":"ok","timestamp":1562092999500,"user_tz":-180,"elapsed":2020,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["import tensorflow as tf\n","\n","tf.reset_default_graph()\n","\n","save_file = 'model.ckpt'\n","\n","# Two Tensor Variables: weights and bias\n","weights = tf.Variable(tf.truncated_normal([2, 3]), name='weights_0')\n","bias = tf.Variable(tf.truncated_normal([3]), name='bias_0')\n","\n","saver = tf.train.Saver()\n","\n","# Print the name of Weights and Bias\n","print('Save Weights: {}'.format(weights.name))\n","print('Save Bias: {}'.format(bias.name))\n","\n","with tf.Session() as sess:\n","    sess.run(tf.global_variables_initializer())\n","    saver.save(sess, save_file)\n","\n","# Remove the previous weights and bias\n","tf.reset_default_graph()\n","\n","# Two Variables: weights and bias\n","bias = tf.Variable(tf.truncated_normal([3]), name='bias_0')\n","weights = tf.Variable(tf.truncated_normal([2, 3]) ,name='weights_0')\n","\n","saver = tf.train.Saver()\n","\n","# Print the name of Weights and Bias\n","print('Load Weights: {}'.format(weights.name))\n","print('Load Bias: {}'.format(bias.name))\n","\n","with tf.Session() as sess:\n","    # Load the weights and bias - No Error\n","    saver.restore(sess, save_file)\n","\n","print('Loaded Weights and Bias successfully.')"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Save Weights: weights_0:0\n","Save Bias: bias_0:0\n","Load Weights: weights_0:0\n","Load Bias: bias_0:0\n","Loaded Weights and Bias successfully.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ALRCb7aX_4s9","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}