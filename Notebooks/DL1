{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled33.ipynb","version":"0.3.2","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"ceHZKhlJdEpB","colab_type":"code","outputId":"e4df5def-7461-4bdc-d25c-5f35777b2b4c","executionInfo":{"status":"ok","timestamp":1561295429087,"user_tz":-180,"elapsed":504,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["import pandas as pd\n","import numpy as np \n","\n","# TODO: Set weight1, weight2, and bias\n","weight1 = 1.0\n","weight2 = 1.0\n","bias = -1.5\n","\n","\n","# DON'T CHANGE ANYTHING BELOW\n","# Inputs and outputs\n","test_inputs = [(0, 0), (0, 1), (1, 0), (1, 1)]\n","correct_outputs = [False, False, False, True]\n","outputs = []\n","\n","# Generate and check output\n","for test_input, correct_output in zip(test_inputs, correct_outputs):\n","    linear_combination = weight1 * test_input[0] + weight2 * test_input[1] + bias\n","    output = int(linear_combination >= 0)\n","    is_correct_string = 'Yes' if output == correct_output else 'No'\n","    outputs.append([test_input[0], test_input[1], linear_combination, output, is_correct_string])\n","\n","# Print output\n","num_wrong = len([output[4] for output in outputs if output[4] == 'No'])\n","output_frame = pd.DataFrame(outputs, columns=['Input 1', '  Input 2', '  Linear Combination', '  Activation Output', '  Is Correct'])\n","if not num_wrong:\n","    print('Nice!  You got it all correct.\\n')\n","else:\n","    print('You got {} wrong.  Keep trying!\\n'.format(num_wrong))\n","print(output_frame.to_string(index=False))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Nice!  You got it all correct.\n","\n"," Input 1    Input 2    Linear Combination    Activation Output   Is Correct\n","       0          0                  -1.5                    0          Yes\n","       0          1                  -0.5                    0          Yes\n","       1          0                  -0.5                    0          Yes\n","       1          1                   0.5                    1          Yes\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ffs8AXofdKYf","colab_type":"code","colab":{}},"source":["import pandas as pd\n","\n","# TODO: Set weight1, weight2, and bias\n","weight1 = 0.0\n","weight2 = 0.0\n","bias = 0.0\n","\n","\n","# DON'T CHANGE ANYTHING BELOW\n","# Inputs and outputs\n","test_inputs = [(0, 0), (0, 1), (1, 0), (1, 1)]\n","correct_outputs = [True, False, True, False]\n","outputs = []\n","\n","# Generate and check output\n","for test_input, correct_output in zip(test_inputs, correct_outputs):\n","    linear_combination = weight1 * test_input[0] + weight2 * test_input[1] + bias\n","    output = int(linear_combination >= 0)\n","    is_correct_string = 'Yes' if output == correct_output else 'No'\n","    outputs.append([test_input[0], test_input[1], linear_combination, output, is_correct_string])\n","\n","# Print output\n","num_wrong = len([output[4] for output in outputs if output[4] == 'No'])\n","output_frame = pd.DataFrame(outputs, columns=['Input 1', '  Input 2', '  Linear Combination', '  Activation Output', '  Is Correct'])\n","if not num_wrong:\n","    print('Nice!  You got it all correct.\\n')\n","else:\n","    print('You got {} wrong.  Keep trying!\\n'.format(num_wrong))\n","print(output_frame.to_string(index=False))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"s1x56b5yhOH3","colab_type":"code","colab":{}},"source":["import numpy as np\n","# Setting the random seed, feel free to change it and see different solutions.\n","np.random.seed(42)\n","\n","def stepFunction(t):\n","    if t >= 0:\n","        return 1\n","    return 0\n","\n","def prediction(X, W, b):\n","    return stepFunction((np.matmul(X,W)+b)[0])\n","\n","# TODO: Fill in the code below to implement the perceptron trick.\n","# The function should receive as inputs the data X, the labels y,\n","# the weights W (as an array), and the bias b,\n","# update the weights and bias W, b, according to the perceptron algorithm,\n","# and return W and b.\n","def perceptronStep(X, y, W, b, learn_rate = 0.01):\n","  for i,j in zip(X,y):\n","    if(prediction(i,W,b)>j):\n","      W-= learning_rate*X\n","      b-=leraning_rate\n","    if(prediction(i,W,b)<j):\n","      W+=learning_rate*X\n","      b+=learning_rate\n","    return W, b\n","    \n","# This function runs the perceptron algorithm repeatedly on the dataset,\n","# and returns a few of the boundary lines obtained in the iterations,\n","# for plotting purposes.\n","# Feel free to play with the learning rate and the num_epochs,\n","# and see your results plotted below.\n","def trainPerceptronAlgorithm(X, y, learn_rate = 0.01, num_epochs = 25):\n","    x_min, x_max = min(X.T[0]), max(X.T[0])\n","    y_min, y_max = min(X.T[1]), max(X.T[1])\n","    W = np.array(np.random.rand(2,1))\n","    b = np.random.rand(1)[0] + x_max\n","    # These are the solution lines that get plotted below.\n","    boundary_lines = []\n","    for i in range(num_epochs):\n","        # In each epoch, we apply the perceptron step.\n","        W, b = perceptronStep(X, y, W, b, learn_rate)\n","        boundary_lines.append((-W[0]/W[1], -b/W[1]))\n","    return boundary_lines"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kJGnbybZiAHb","colab_type":"code","outputId":"7d8a328c-3714-4727-e383-a136207cabbe","executionInfo":{"status":"ok","timestamp":1561297142122,"user_tz":-180,"elapsed":513,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":442}},"source":["X=np.array([[1,2],[6,4],[9,4],[2,3],[4,1]])\n","y=np.array([1,0,1,0,1])\n","trainPerceptronAlgorithm(X,y)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026])),\n"," (array([-3.83709589]), array([-58.68526026]))]"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"id":"5LIhi7R9ilt6","colab_type":"code","outputId":"4f26d510-6556-42d3-e1a7-9cd3f1d21328","executionInfo":{"status":"ok","timestamp":1561297065068,"user_tz":-180,"elapsed":545,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}},"colab":{"base_uri":"https://localhost:8080/","height":68}},"source":["for i,j in zip(X,y):\n","  print(i)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[1 2]\n","[6 4]\n","[9 4]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lWym9NY1i9Vb","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KN2bD38wCVye","colab_type":"text"},"source":["#Softmax"]},{"cell_type":"markdown","metadata":{"id":"1Gc6o3CqCbmp","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"Gg2d5sJ0CYVa","colab_type":"code","colab":{}},"source":["import math\n","def softmax(l):\n","  l2=[]\n","  tmp=0\n","  for i in l:\n","    tmp+=math.e**i\n","  for i in l:\n","    l2.append(math.e**i/tmp)\n","  return l2"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"m9TO14jWCZHO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"18490ffc-ae88-4714-be54-7b4b3f722ec8","executionInfo":{"status":"ok","timestamp":1561288724990,"user_tz":-180,"elapsed":1263,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["l=[0,1,2]\n","softmax(l)"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[0.09003057317038046, 0.24472847105479764, 0.6652409557748219]"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"sD5eoXYpYo2q","colab_type":"text"},"source":["#Cross entropy"]},{"cell_type":"code","metadata":{"id":"osyxXnxODGpm","colab_type":"code","colab":{}},"source":["import numpy as np\n","\n","def cross_entropy(Y,P):\n","  Y=np.float_(Y)\n","  P=np.float_(P)\n","  return -np.sum(Y*np.log(P)+(1-Y)*np.log(1-P))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JuU6sau_ZINd","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"2c32e027-30cb-4c0a-c579-b14b65d23ae9","executionInfo":{"status":"ok","timestamp":1561311292058,"user_tz":-180,"elapsed":591,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"source":["Y=[1,0,1]\n","P=[0.8,0.3,0.75]\n","cross_entropy(Y,P)"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8675005677047231"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"cmVbDabJZREi","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}