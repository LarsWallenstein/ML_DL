{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"GAN","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"S7jLyYghNoOT","colab_type":"code","colab":{}},"cell_type":"code","source":["import random\n","import argparse\n","import cv2"],"execution_count":0,"outputs":[]},{"metadata":{"id":"PxdlFNBsODDG","colab_type":"code","colab":{}},"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim"],"execution_count":0,"outputs":[]},{"metadata":{"id":"aaw439o5O8fj","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"outputId":"e25b721e-b81d-4874-bb1a-44addc002bc6","executionInfo":{"status":"ok","timestamp":1554554352378,"user_tz":-180,"elapsed":4121,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["!pip install tensorboardX\n","\n","from tensorboardX import SummaryWriter"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: tensorboardX in /usr/local/lib/python3.6/dist-packages (1.6)\n","Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from tensorboardX) (1.14.6)\n","Requirement already satisfied: protobuf>=3.2.0 in /usr/local/lib/python3.6/dist-packages (from tensorboardX) (3.7.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from tensorboardX) (1.11.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from protobuf>=3.2.0->tensorboardX) (40.9.0)\n"],"name":"stdout"}]},{"metadata":{"id":"gsvQ0PEgPC6V","colab_type":"code","colab":{}},"cell_type":"code","source":["import torchvision.utils as vutils"],"execution_count":0,"outputs":[]},{"metadata":{"id":"98IcHJdjPU8b","colab_type":"code","colab":{}},"cell_type":"code","source":["import gym\n","import gym.spaces"],"execution_count":0,"outputs":[]},{"metadata":{"id":"DEcNCYpKPb0l","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np"],"execution_count":0,"outputs":[]},{"metadata":{"id":"RjFTWglcPf1k","colab_type":"code","colab":{}},"cell_type":"code","source":["\n","log = gym.logger# для создания логгов и отладки"],"execution_count":0,"outputs":[]},{"metadata":{"id":"66VzCJDiP9Cg","colab_type":"code","colab":{}},"cell_type":"code","source":["log.set_level(gym.logger.info)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"B5FeLjKLQUDo","colab_type":"code","colab":{}},"cell_type":"code","source":["LATENT_VECTOR_SIZE = 100\n","DISCR_FILTERS = 64\n","GENER_FILTERS = 64\n","BATCH_SIZE = 16"],"execution_count":0,"outputs":[]},{"metadata":{"id":"N_GaxHxGQoa1","colab_type":"code","colab":{}},"cell_type":"code","source":["IMAGE_SIZE = 64\n","\n","LEARNING_RATE = 0.0001\n","REPORT_EVERY_ITER = 100\n","SAVE_IMAGE_EVERY_ITER = 1000"],"execution_count":0,"outputs":[]},{"metadata":{"id":"YtFVNMAdQ5XN","colab_type":"code","colab":{}},"cell_type":"code","source":["class InputWrapper(gym.ObservationWrapper):\n","  \"\"\"\n","  Препроцессинг входного изображения(нампаевского массива)\n","  1. Рескэйл изображения под заданный размер\n","  2. перекинуть цветовой канал на первое место, тк это так устроен механизм торч\n","  \"\"\"\n","  def __init__(self,*args):\n","    super(InputWrapper, self).__init__(*args)\n","    assert isinstance(self.observation_space, gym.spaces.Box)\n","    old_space = self.observation_space\n","    self.observation_space = gym.spaces.Box(self.observation(old_space.low), self.observation(old_space.high), dtype=np.float32)\n","    \n","  def observation(self, observation):\n","    # resize image\n","    new_obs = cv2.resize(observation, (IMAGE_SIZE, IMAGE_SIZE))\n","    # рескэйл ( 210, 160, 3) - > (3, 210, 160)\n","    new_obs = np.moveaxis(new_obs, 2, 0)\n","    return new_obs.astype(np.float32)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"YZy83TTVULWY","colab_type":"code","colab":{}},"cell_type":"code","source":["class Discriminator(nn.Module):#нейросеть критик\n","  \n","  def __init__(self, input_shape):\n","    super(Discriminator, self).__init__()\n","    self.conv_pipe = nn.Sequential(\n","    nn.Conv2d(in_channels=input_shape[0], out_channels=DISCR_FILTERS,kernel_size=4, stride=2, padding=1),\n","    nn.ReLU(),\n","    nn.Conv2d(in_channels=DISCR_FILTERS, out_channels=DISCR_FILTERS*2,kernel_size=4, stride=2, padding=1),\n","    nn.BatchNorm2d(DISCR_FILTERS*2),\n","    nn.ReLU(),\n","    nn.Conv2d(in_channels=DISCR_FILTERS*2, out_channels=DISCR_FILTERS*4,kernel_size=4, stride=2, padding=1),\n","    nn.BatchNorm2d(DISCR_FILTERS*4),\n","    nn.ReLU(),\n","    nn.Conv2d(in_channels=DISCR_FILTERS*4, out_channels=DISCR_FILTERS*8,kernel_size=4, stride=2, padding=1),\n","    nn.BatchNorm2d(DISCR_FILTERS*8),\n","    nn.ReLU(),\n","    nn.Conv2d(in_channels=DISCR_FILTERS * 8, out_channels=1,kernel_size=4, stride=1, padding=0),\n","    nn.Sigmoid()\n","    )\n","    \n","    \n","  def forward(self, x):\n","    conv_out = self.conv_pipe(x)\n","    return conv_out.view(-1,1).squeeze(dim=1)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"thbfa8KLYu-m","colab_type":"code","colab":{}},"cell_type":"code","source":["class Generator(nn.Module):# нейронка, создающая изображение\n","  def __init__(self, out_shape):\n","    super(Generator, self).__init__()\n","    # создаёт из вектора изображение размерностью (3, 64, 64) \n","    self.pipe = nn.Sequential(\n","      nn.ConvTranspose2d(in_channels=LATENT_VECTOR_SIZE, out_channels=GENER_FILTERS*8,\n","                        kernel_size=4, stride=1, padding=0),\n","      nn.BatchNorm2d(GENER_FILTERS * 8),\n","      nn.ReLU(),\n","      nn.ConvTranspose2d(in_channels=GENER_FILTERS*8, out_channels=GENER_FILTERS*4,\n","                        kernel_size=4, stride=1, padding=0),\n","      nn.BatchNorm2d(GENER_FILTERS * 4),\n","      nn.ReLU(),\n","      nn.ConvTranspose2d(in_channels=GENER_FILTERS*4, out_channels=GENER_FILTERS*2,\n","                        kernel_size=4, stride=1, padding=0),\n","      nn.BatchNorm2d(GENER_FILTERS * 2),\n","      nn.ReLU(),\n","      nn.ConvTranspose2d(in_channels=GENER_FILTERS*2, out_channels=GENER_FILTERS,\n","                        kernel_size=4, stride=1, padding=0),\n","      nn.BatchNorm2d(GENER_FILTERS),\n","      nn.ReLU(),\n","      nn.ConvTranspose2d(in_channels=GENER_FILTERS, out_channels=output_shape[0],\n","                        kernel_size=4, stride=1, padding=0),\n","      nn.Tanh()\n","    )\n","    \n","  def forward(self,x):\n","    return self.pipe(x)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"fMdb-fiHcs7A","colab_type":"code","colab":{}},"cell_type":"code","source":["def iterate_batches(envs, batch_size = BATCH_SIZE):\n","  batch = [e.reset() for e in envs]\n","  env_gen = iter(lambda: random.choice(envs), None)\n","  \n","  while True:\n","    e = next(env_gen)\n","    obs, reward, is_done, _ = e.step(e.action_space.sample())\n","    if(np.mean(obs)>0.01):\n","      batch.appnd(obs)\n","    if(len(batch) == batch_size):\n","      #шкалируем входные данные между -1 и 1\n","      batch_np = np.array(batch, dtype=np.float32)*2.0/255.0-1.0\n","      yield torch.tensor(batch_up)\n","      batch.clear()\n","    if(is_done):\n","      e.reset()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"95BWPLfbegUz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":727},"outputId":"50139804-3356-4fdd-9e87-032e421a1e61","executionInfo":{"status":"error","timestamp":1554555106347,"user_tz":-180,"elapsed":577,"user":{"displayName":"Alex Korsakov","photoUrl":"","userId":"18248625518508782982"}}},"cell_type":"code","source":["if __name__==\"__main__\":\n","  \n","  parser = argparse.ArgumentParser()\n","  parser.add_argument(\"--cuda\", default=False, action='store_true', help=\"Enable cuda computation\")\n","  args = parser.parse_args(args=[])\n","  \n","  device = torch.device(\"cuda\" if args.cuda else \"cpu\")\n","  envs = [InputWrapper(gym.make(name)) for name in ('Breakout-v0', 'AirRaid-v0', 'Pong-v0')]\n","  input_shape = envs[0].observation_space.shape\n","  \n","  net_disr = Discriminator(input_shape=input_shape).to(device)\n","  net_gener = Generator(out_shape=input_shape).to(device)\n","  \n","  objective = nn.BCELoss()\n","  gen_optimizer = optim.Adam(params = net_gener.parameters(), lr = LEARNING_RATE, betas = (0.5, 0.999))\n","  dis_optimizer = optim.Adam(params = net_discr.parameters(), lr = LEARNING_RATE, betas = (0.5, 0.999))\n","  writer = SummaryWriter()\n","  \n","  gen_losses = []\n","  dis_losses = []\n","  iter_no = 0\n","  \n","  true_labels_v = torch.ones(BATCH_SIZE, dtype = torch.float32, device = device)\n","  fake_labels_v = torch.zeros(BATCH_SIZE, dtype = torch.float32, device = device)\n","  \n","  for batch_v in iterate_batches(envs):\n","    #генерируем дополнительные фэйковые примеры, входные данные 4D: batch, filters, x, y\n","    gen_input_v = torch.FloatTensor(BATCH_SIZE, LATENT_VECTOR_SIZE, 1, 1).normal(0,1).to(device)\n","    batch_v = batch_v.to(device)\n","    gen_output_v = net_gener(gen_input_v)\n","    \n","    dis_optimizer.zero_grad()\n","    dis_output_true_v = net_discr(batch_v)\n","    dis_output_fake_v = net_discr(dis_output_v.detach())\n","    dis_loss = objective(dis_output_true_v, true_labels_v) + objective(dis_output_fake_v, fake_labels_v)\n","    diss_loss.backward()\n","    diss_optimizer.step()\n","    diss_losses.append(gen_loss_v.item())\n","    \n","    iter_no += 1\n","    if iter_no % REPORT_EVERY_ITER == 0:\n","      log.info(\"Iter %d: gen_loss=%.3e, dis_loss=%.3e\", iter_no, np.mean(gen_losses), np.mean(dis_losses))\n","      writer.add_scalar(\"gen_loss\", np.mean(gen_losses), iter_no)\n","      writer.add_scalar(\"dis_loss\", np.mean(dis_losses), iter_no)\n","      gen_losses = []\n","      dis_losses = []\n","    if iter_no % SAVE_IMAGE_EVERY_ITER == 0:\n","      writer.add_image(\"fake\", vutils.make_grid(gen_output_v.data[:64], normalize=True), iter_no)\n","      writer.add_image(\"real\", vutils.make_grid(batch_v.data[:64], normalize=True), iter_no)"],"execution_count":41,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-00972ea98e70>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0mdevice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cuda\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"cpu\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m   \u001b[0menvs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mInputWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgym\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'Breakout-v0'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'AirRaid-v0'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Pong-v0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m   \u001b[0minput_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menvs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobservation_space\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-41-00972ea98e70>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0mdevice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"cuda\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"cpu\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m   \u001b[0menvs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mInputWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgym\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'Breakout-v0'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'AirRaid-v0'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Pong-v0'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m   \u001b[0minput_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0menvs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobservation_space\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/gym/envs/registration.py\u001b[0m in \u001b[0;36mmake\u001b[0;34m(id, **kwargs)\u001b[0m\n\u001b[1;32m    169\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 171\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mregistry\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    172\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    173\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mspec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/gym/envs/registration.py\u001b[0m in \u001b[0;36mmake\u001b[0;34m(self, id, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Making new env: %s (%s)'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Making new env: %s'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    122\u001b[0m         \u001b[0mspec\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspec\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m         \u001b[0menv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspec\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/gym/logger.py\u001b[0m in \u001b[0;36minfo\u001b[0;34m(msg, *args)\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mMIN_LEVEL\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mINFO\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'%s: %s'\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'INFO'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: '<=' not supported between instances of 'function' and 'int'"]}]}]}